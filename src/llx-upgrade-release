#!/usr/bin/python3
import sys,os,subprocess
import signal
import llxupgrader

noreturn=0

def abort(*args):
	print("",end="")
	if noreturn==1:
		llxupgrader.restoreRepos()
	elif noreturn==2:
		sys.exit(1)
#def abort

signal.signal(signal.SIGINT, abort)

def _help():
	print("Usage: {} [--unattended] [-d] [path]".format(sys.argv[0]))
	print("")
	print("\t --unattended: Ask \"yes\" to all and upgrade without user interaction")
	print("\t -d --download: Only download packages")
	print("\t path: If a path to a valid repo is supplied upgrade from it")
	print("")
	print("For building a valid repository for upgrading other machines execute in only-download mode")
	print("When finished copy the generated repository to the desired storage medium.")
	print("Then it's possible to upgrade other machines from that repo using its path as argument to llx-upgrade-release")
	print("")
	sys.exit(0)
#def _help

def disclaimerAgree():
	print()
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print()
	print(" {}".format(llxupgrader.i18n("DISCLAIMER")))
	print()
	print("****************")
	print(" * {} *".format(llxupgrader.i18n("READ")))
	print("****************")
	print()
	print(" * {} *".format(llxupgrader.i18n("REPOS")))
	print()
	print("{}".format(llxupgrader.i18n("DISMISS")))
	print()
	abort=input("[y]/n: ")
	if abort=="n":
		return(True)
	return(False)
#def disclaimerAgree

def lastChance():
	print()
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print()
	print(" {}".format(llxupgrader.i18n("DISCLAIMER")))
	print()
	print("****************")
	print("****************")
	print()
	print(" * {} *".format(llxupgrader.i18n("LASTCHANCE")))
	print()
	print("****************")
	print("****************")
	print()
	print("{}".format(llxupgrader.i18n("DISMISS")))
	print()
	abort=input("[y]/n: ")
	if abort=="n":
		return(True)
	return(False)
#def lastChance

def _errorEnd():
	print("****************")
	print("****************")
	print("{0}\n{1}".format(llxupgrader.i18n("REBOOT2"),llxupgrader.i18n("REBOOT3")))
	llxupgrader.restoreRepos()
	print()
	llxupgrader.downgrade()
	print()
	print("{}\n{}".format(llxupgrader.i18n("PRAY"),llxupgrader.i18n("PRAY2")))
	print()
#def _errorEnd

def chkParms(args):
	unattended=False
	download=False
	repo=""
	for arg in args[1:]:
		if arg.lower()=="--unattended":
			unattended=True
		elif os.path.exists(arg):
			repo=arg
		elif arg.lower()=="-d" or arg.lower()=="--download":
			download=True
		else:
			_help()
	return(unattended,repo,download)
#def chkParms

#### MAIN APP ####
unattended=False
repo=""
if os.geteuid()!=0:
	print(llxupgrader.i18n("ROOT"))
	sys.exit(10)

if len(sys.argv[0])>1:
	(unattended,repo,download)=chkParms(sys.argv)
if len(repo)>0:
	print("Using {}".format(repo))

url="https://raw.githubusercontent.com/lliurex/llx-upgrade-release/master/src/files/meta-release"
meta=llxupgrader.downloadFile(url)
with open(meta,"r") as f:
	metadata=llxupgrader.processMetaRelease(f.readlines())
upgradeTo={}
if os.path.isfile(meta):
	with open(meta,"r") as f:
		metadata=llxupgrader.processMetaRelease(f.readlines())
	upgradeTo=llxupgrader.chkReleaseAvailable(metadata)
else:
	print(llxupgrader.i18n("NETWORK"))
	sys.exit(15)
if unattended==False and len(upgradeTo)>0:
	print("{0}: {1}".format(llxupgrader.i18n("AVAILABLE"),upgradeTo["Name"].split(":")[1].strip()))
	upgrade=input("{}? y/[n]: ".format(llxupgrader.i18n("ASK")))
	if upgrade!="y":
		print(llxupgrader.i18n("ABORT"))
		sys.exit(2)
elif len(upgradeTo)<=0:
	print(llxupgrader.i18n("NOAVAILABLE"))
	sys.exit(0)
if unattended==False and disclaimerAgree()==False:
	print(llxupgrader.i18n("ABORT"))
	sys.exit(2)
print()
print(llxupgrader.i18n("BEGIN"))
packagesToUpdate=llxupgrader.upgradeCurrentState()
if len(packagesToUpdate)>0:
	print(llxupgrader.i18n("PENDING"))
	sys.exit(3)
print(llxupgrader.i18n("DISABLE"))
print(llxupgrader.i18n("DEFAULT"))
if unattended==False:
	print("\n  **** {} **** \n".format(llxupgrader.i18n("UNDO").upper()))
	abort=input("[n]/ok: ")
	if abort!="ok":
		print(llxupgrader.i18n("ABORT"))
		sys.exit(2)
noreturn=1
if unattended==False:
	if lastChance()==False:
		#llxupgrader.restoreRepos()
		print(llxupgrader.i18n("ABORT"))
		print(llxupgrader.i18n("REVERT"))
		print(llxupgrader.i18n("RECOM"))
		print(llxupgrader.i18n("PRESS"))
		noreturn=2
		input("")
llxupgrader.disableRepos()
if repo=="":
	tools=llxupgrader.prepareFiles(upgradeTo)
	llxupgrader.enableUpgradeRepos(tools)
	llxupgrader.getAllPackages()
	print(llxupgrader.i18n("EXTRACT"))
	pkgs=llxupgrader.getDependPkgs()
	llxupgrader.downloadPackages(pkgs,repo)
elif os.path.exists(repo)==False:
	print("{}: {}".format(llxupgrader.i18n("REPONOTFOUND"),repo))
	llxupgrader.restoreRepos()
	noreturn=2
	sys.exit(10)
print("Local repo: {}".format(repo))
llxupgrader.generateLocalRepo("jammy",repo)
if download==True:
	print("{}".format(llxupgrader.i18n("DOWNLOADED")))
	llxupgrader.restoreRepos()
	sys.exit(0)
#llxupgrader.generateReleaseFile("jammy","23.8","2023.08.07")
llxupgrader.setLocalRepo("jammy",repo)
noreturn=0
llxupgrader.setSystemdUpgradeTarget()
llxupgrader.upgradeLlxUp(upgradeTo)
unattendedf="/tmp/.unattended"
repof="/tmp/.repo"
if repo=="":
	if os.path.exists(repof):
		os.unlink(repof)
else:
	with open(repof,"w") as f:
		f.write("{}".format(repo))
if unattended==False:
	if os.path.exists(unattendedf):
		os.unlink(unattendedf)
	print("{0}\n{1}\n{2}\n".format(llxupgrader.i18n("REBOOT"),llxupgrader.i18n("REBOOT1"),llxupgrader.i18n("END")))
	reboot=input("[y]/n: ")
	if upgrade!="n":
		cmd=["systemctl","isolate","llx-upgrade"]
		subprocess.run(cmd)
else:
	f=open(unattendedf,"w")
	f.close()
	cmd=["systemctl","isolate","llx-upgrade"]
	subprocess.run(cmd)
sys.exit(noreturn)
