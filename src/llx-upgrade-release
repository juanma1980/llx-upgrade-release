#!/usr/bin/python3
import sys,os,subprocess
import signal
import llxupgrader


noreturn=0

def abort(*args):
	print("",end="")
	if noreturn==1:
		llxupgrader.restoreRepos()
	elif noreturn==2:
		sys.exit(1)
#def abort

signal.signal(signal.SIGINT, abort)

def disclaimerAgree():
	print()
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print()
	print(" {}".format(llxupgrader.i18n("DISCLAIMER")))
	print()
	print("****************")
	print(" * {} *".format(llxupgrader.i18n("READ")))
	print("****************")
	print()
	print(" * {} *".format(llxupgrader.i18n("REPOS")))
	print()
	print("{}".format(llxupgrader.i18n("DISMISS")))
	print()
	abort=input("[y]/n: ")
	if abort=="n":
		return(True)
	return(False)
#def disclaimerAgree

def lastChance():
	print()
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print(" ===== {} =====".format(llxupgrader.i18n("IMPORTANT")))
	print()
	print(" {}".format(llxupgrader.i18n("DISCLAIMER")))
	print()
	print("****************")
	print("****************")
	print()
	print(" * {} *".format(llxupgrader.i18n("LASTCHANCE")))
	print()
	print("****************")
	print("****************")
	print()
	print("{}".format(llxupgrader.i18n("DISMISS")))
	print()
	abort=input("[y]/n: ")
	if abort=="n":
		return(True)
	return(False)
#def lastChance

def _errorEnd():
	print("****************")
	print("****************")
	print("{0}\n{1}".format(llxupgrader.i18n("REBOOT2"),llxupgrader.i18n("REBOOT3")))
	llxupgrader.restoreRepos()
	print()
	llxupgrader.downgrade()
	print()
	print("{}\n{}".format(llxupgrader.i18n("PRAY"),llxupgrader.i18n("PRAY2")))
	print()
#def _errorEnd

#### MAIN APP ####

if os.geteuid()!=0:
	print(llxupgrader.i18n("ROOT"))
	sys.exit(10)

url="https://raw.githubusercontent.com/lliurex/llx-upgrade-release/master/src/files/meta-release"
meta=llxupgrader.downloadFile(url)
with open(meta,"r") as f:
	metadata=llxupgrader.processMetaRelease(f.readlines())
upgradeTo=llxupgrader.chkReleaseAvailable(metadata)
print(upgradeTo)
if len(upgradeTo)>0:
	print("{0}: {1}".format(llxupgrader.i18n("AVAILABLE"),upgradeTo["Name"].split(":")[1].strip()))
	upgrade=input("{}? y/[n]: ".format(llxupgrader.i18n("ASK")))
	if upgrade!="y":
		print(llxupgrader.i18n("ABORT"))
		sys.exit(2)
if disclaimerAgree()==False:
	print(llxupgrader.i18n("ABORT"))
	sys.exit(2)
print()
print(llxupgrader.i18n("BEGIN"))
packagesToUpdate=llxupgrader.upgradeCurrentState()
if len(packagesToUpdate)>0:
	print(llxupgrader.i18n("PENDING"))
	#sys.exit(3)
print(llxupgrader.i18n("DISABLE"))
print(llxupgrader.i18n("DEFAULT"))
print("\n  **** {} **** \n".format(llxupgrader.i18n("UNDO").upper()))
abort=input("[n]/ok: ")
if abort!="ok":
	print(llxupgrader.i18n("ABORT"))
	sys.exit(2)
llxupgrader.disableRepos()
tools=llxupgrader.prepareFiles(upgradeTo)
print(llxupgrader.i18n("EXTRACT"))
llxupgrader.enableUpgradeRepos(tools)
noreturn=1
if lastChance()==False:
	llxupgrader.restoreRepos()
	print(llxupgrader.i18n("ABORT"))
	print(llxupgrader.i18n("REVERT"))
	print(llxupgrader.i18n("RECOM"))
	print(llxupgrader.i18n("PRESS"))
	noreturn=2
	input("")
	os.execv("/usr/sbin/lliurex-upgrade",["-n"])
#llxupgrader.launchLliurexUpgrade()
llxupgrader.downloadPackages()
llxupgrader.generateLocalRepo()
llxupgrader.setLocalRepo()
noreturn=0
#self.upgradeTo=self.chkUpAvailable()
#if len(self.upgradeTo)>0:
#	_errorEnd()
llxupgrader.setSyemdUpgradeTarget()
cmd=["systemctl","isolate","llx-upgrade"]
subprocess.run(cmd)
sys.exit(noreturn)
